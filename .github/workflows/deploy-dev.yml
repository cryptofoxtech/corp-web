# GitHub Actions Workflow for Cryptofox Corp Web Deployment
# This workflow deploys the React frontend to Azure Static Web Apps
# and the Node.js backend API to the integrated App Service.

name: Deploy Cryptofox Corp Web (Dev)

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest # Use a Linux runner for the build and deploy steps
    environment: dev # Associate this job with the 'dev' environment (optional, for GitHub Environments)

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4 # Checkout the source code from your repository

      - name: Set up Node.js
        uses: actions/setup-node@v4 # Use Node.js 18.x as specified in your Bicep
        with:
          node-version: '18.x'
          cache: 'npm' # Cache npm dependencies for faster builds

      - name: Install Frontend Dependencies
        working-directory: ./client # Navigate to the client directory
        run: npm install # Install npm packages for the React frontend

      - name: Build Frontend (React)
        working-directory: ./client # Navigate to the client directory
        run: npm run build # Run the build script defined in client/package.json
        env:
          CI: false # Suppress warnings treated as errors in CI environments

      - name: Install Backend Dependencies
        working-directory: ./server # Navigate to the server directory
        run: npm install # Install npm packages for the Node.js backend

      - name: Deploy to Azure Static Web Apps
        id: swa_deploy
        uses: azure/static-web-apps-deploy@v1 # Use the Azure Static Web Apps Deploy action
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_DEV }}
          repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for GitHub API interactions (e.g., creating deployment environments)
          action: 'upload' # Specify the action as 'upload' for deployment
          # IMPORTANT CHANGE: app_location now points directly to the built frontend artifacts
          app_location: 'client/build' # <--- This is the key change: point to the actual build output
          api_location: '/server'
          # IMPORTANT CHANGE: output_location is empty because app_location is already the output
          output_location: '' # <--- This is the key change: empty string
          skip_app_build: true # We built the app in a previous step
          skip_api_build: true # We installed backend dependencies in a previous step
          # app_artifact_location is no longer needed when app_location points to the build output
          # app_artifact_location: 'client/build' # <--- REMOVED THIS LINE
          
      - name: Output Deployment Details
        run: |
          echo "Frontend URL: ${{ steps.swa_deploy.outputs.static_web_app_url }}"
          echo "Backend URL: ${{ steps.swa_deploy.outputs.api_url }}"
