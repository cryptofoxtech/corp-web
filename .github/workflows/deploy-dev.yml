# .github/workflows/deploy-dev.yml
name: Deploy Cryptofox Corp Web (Dev) - Frontend & API

on:
  push:
    branches:
      - main
      - master
      - develop

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm' # Keep this for standard caching but rely on explicit cleanup below
          cache-dependency-path: 'client/package-lock.json' # Cache based on client lock file

      # === Client (Frontend) Build Steps ===
      - name: Clean npm cache (Client - Aggressive)
        run: npm cache clean --force
        working-directory: ./client

      - name: Remove client node_modules and package-lock.json (Aggressive)
        run: |
          rm -rf node_modules
          rm package-lock.json
        working-directory: ./client

      - name: Install Frontend Dependencies (Using npm ci for strictness)
        working-directory: ./client
        run: npm ci --legacy-peer-deps

      # --- NEW CRITICAL STEP TO ADDRESS AJV ERROR ---
      - name: Force AJV-keywords compatible version
        working-directory: ./client
        run: npm install ajv-keywords@^3.5.2 # This specific version is often reported to fix the issue

      - name: Build Frontend (React)
        working-directory: ./client
        run: npm run build
        env:
          CI: false

      # === Server (API) Build Steps ===
      - name: Clean npm cache (Server/API - Aggressive)
        run: npm cache clean --force
        working-directory: ./server

      - name: Remove server node_modules and package-lock.json (Aggressive)
        run: |
          rm -rf node_modules
          rm package-lock.json
        working-directory: ./server

      - name: Install API Dependencies (Using npm ci)
        working-directory: ./server
        run: npm ci

      - name: Deploy Frontend & API to Azure Static Web Apps
        id: swa_deploy
        uses: azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_DEV }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: 'upload'
          app_location: 'client/build'
          api_location: 'server'
          output_location: ''
          skip_app_build: true
          skip_api_build: false

      - name: Output Deployment Details
        run: |
          echo "Frontend URL: ${{ steps.swa_deploy.outputs.static_web_app_url }}"